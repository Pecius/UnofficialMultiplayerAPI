{
  "index.html": {
    "href": "index.html",
    "title": "How to use the API",
    "keywords": "How to use the API Download and copy 0UnofficialMultiplayerAPI.dll to your mod's Assemblies directory and reference it in your project. Check the API documentation and examples for further details. 0UnofficialMultiplayerAPI This is basically an interface, a glorified header file in an assembly with some additional sugar coating. It acts as a movable bridge between your mod and the API host, it only depends on the game itself so your mod won't suddenly become dependent on the multiplayer mod. Since only one assembly with the same name (and assembly version) is loaded at the time, your mod will always use its newest version (that is included with the host), even if you referenced an older one. Thankfully that doesn't mean your mod will break if that happens, as additions of the new classes and methods are not changing much from the point of view of your assembly. Additionally it also informs clients that they're missing the required host addon and points them either to workshop or to releases on github (if your mod uses the API and multiplayer mod is detected as well). How to compile the API Place the repo root in a Unofficial Multiplayer API folder inside of Mods directory ( RimWorld/Mods ). You also need the Multiplayer mod placed in the same directory. To compile it simply use the solution called Unofficial_multiplayer_API.sln found in Sources directory."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "api/UnofficialMultiplayerAPI.UninitializedAPI.html": {
    "href": "api/UnofficialMultiplayerAPI.UninitializedAPI.html",
    "title": "Class UninitializedAPI",
    "keywords": "Class UninitializedAPI An exception that is thrown if you try to use the API without avaiable host. Inheritance Object Exception UninitializedAPI Namespace : UnofficialMultiplayerAPI Assembly : 0UnofficialMultiplayerAPI.dll Syntax public class UninitializedAPI : Exception, ISerializable, _Exception"
  },
  "api/UnofficialMultiplayerAPI.ISyncable.html": {
    "href": "api/UnofficialMultiplayerAPI.ISyncable.html",
    "title": "Interface ISyncable",
    "keywords": "Interface ISyncable An interface that allows syncing objects that inherit it. Namespace : UnofficialMultiplayerAPI Assembly : 0UnofficialMultiplayerAPI.dll Syntax public interface ISyncable Methods Sync(SyncWorker) An entry point that is used when object is to be read/written. Declaration void Sync(SyncWorker sync) Parameters Type Name Description SyncWorker sync A SyncWorker that will read/write data bound with Bind methods. Remarks Requires a default constructor that takes no parameters. Check SyncerAttribute to see how to make a syncer that allows for a manual object construction. Examples A simple implementation that binds object's fields x, y, z for reading/writing. public void Sync(SyncWorker sync) { sync.Bind(ref this.x); sync.Bind(ref this.y); sync.Bind(ref this.z); } An implementation that sends field a, but saves it back into field b when it's received. public void Sync(SyncWorker sync) { if(sync.isWriting) sync.Bind(ref this.a); else sync.Bind(ref this.b); }"
  },
  "api/UnofficialMultiplayerAPI.ISyncField.html": {
    "href": "api/UnofficialMultiplayerAPI.ISyncField.html",
    "title": "Interface ISyncField",
    "keywords": "Interface ISyncField SyncField interface. Namespace : UnofficialMultiplayerAPI Assembly : 0UnofficialMultiplayerAPI.dll Syntax public interface ISyncField Examples Creates and registers a SyncField that points to myField in object of type MyType and enables its change buffer. MPApi.SyncField(typeof(MyType), \"myField\").SetBufferChanges(); Creates and registers a SyncField that points to myField which resides in MyStaticClass . MPApi.SyncField(null, \"MyAssemblyNamespace.MyStaticClass.myField\"); Creates and registers a SyncField that points to myField that resides in an object stored by myEnumberable defined in an object of type MyType . To watch this one you have to supply an index in Watch(Object, Object) . MPApi.SyncField(typeof(MyType), \"myEnumerable/[]/myField\"); Methods CancelIfValueNull() Instructs SyncField to cancel synchronization if the value of the member it's pointing at is null. Declaration ISyncField CancelIfValueNull() Returns Type Description ISyncField self InGameLoop() Instructs SyncField to sync in game loop. Declaration ISyncField InGameLoop() Returns Type Description ISyncField self PostApply(Action<Object, Object>) Adds an Action that runs after a field is synchronized. Declaration ISyncField PostApply(Action<object, object> action) Parameters Type Name Description Action < Object , Object > action An action ran after a field is synchronized. Called with target and value. Returns Type Description ISyncField self PreApply(Action<Object, Object>) Adds an Action that runs before a field is synchronized. Declaration ISyncField PreApply(Action<object, object> action) Parameters Type Name Description Action < Object , Object > action An action ran before a field is synchronized. Called with target and value. Returns Type Description ISyncField self SetBufferChanges() Instructs SyncField to use a buffer instead of syncing instantly (when FieldWatchPostfix() is called). Declaration ISyncField SetBufferChanges() Returns Type Description ISyncField self SetDebugOnly() Instructs SyncField to synchronize only in debug mode. Declaration ISyncField SetDebugOnly() Returns Type Description ISyncField self SetHostOnly() Instructs SyncField to synchronize only if it's invoked by the host. Declaration ISyncField SetHostOnly() Returns Type Description ISyncField self SetVersion(Int32) Declaration ISyncField SetVersion(int version) Parameters Type Name Description Int32 version Returns Type Description ISyncField self Watch(Object, Object) Declaration void Watch(object target = null, object index = null) Parameters Type Name Description Object target An object of type set in the ISyncField . Set to null if you're watching a static field. Object index Index in the field path set in ISyncField ."
  },
  "api/UnofficialMultiplayerAPI.ISyncMethod.html": {
    "href": "api/UnofficialMultiplayerAPI.ISyncMethod.html",
    "title": "Interface ISyncMethod",
    "keywords": "Interface ISyncMethod SyncMethod interface. Namespace : UnofficialMultiplayerAPI Assembly : 0UnofficialMultiplayerAPI.dll Syntax public interface ISyncMethod Remarks See SyncMethodAttribute , RegisterSyncMethod(MethodInfo, SyncType[]) and RegisterSyncMethod(Type, String, SyncType[]) to see how to use it. Methods CancelIfAnyArgNull() Instructs SyncMethod to cancel synchronization if any arg is null. Declaration ISyncMethod CancelIfAnyArgNull() Returns Type Description ISyncMethod self CancelIfNoSelectedMapObjects() Instructs SyncMethod to cancel synchronization if no map objects were selected during call replication. Declaration ISyncMethod CancelIfNoSelectedMapObjects() Returns Type Description ISyncMethod self CancelIfNoSelectedWorldObjects() Instructs SyncMethod to cancel synchronization if no world objects were selected during call replication. Declaration ISyncMethod CancelIfNoSelectedWorldObjects() Returns Type Description ISyncMethod self ExposeParameter(Int32) Use parameter's type's IExposable interface to transfer its data to other clients. Declaration ISyncMethod ExposeParameter(int index) Parameters Type Name Description Int32 index Index at which parameter is to be marked to expose Returns Type Description ISyncMethod self Remarks IExposable is the interface used for saving data to the save which means it utilizes IExposable.ExposeData() method. MinTime(Int32) Currently unused in the Multiplayer mod. Declaration ISyncMethod MinTime(int time) Parameters Type Name Description Int32 time Milliseconds between resends Returns Type Description ISyncMethod self SetContext(SyncContext) Instructs method to send context along with the call. Declaration ISyncMethod SetContext(SyncContext context) Parameters Type Name Description SyncContext context One or more context flags Returns Type Description ISyncMethod self Remarks Context is restored after method is called. SetDebugOnly() Instructs SyncMethod to synchronize only in debug mode. Declaration ISyncMethod SetDebugOnly() Returns Type Description ISyncMethod self SetPreInvoke(Action<Object, Object[]>) Adds an Action that runs before a call is replicated on client. Declaration ISyncMethod SetPreInvoke(Action<object, object[]> action) Parameters Type Name Description Action < Object , Object []> action An action ran before a call is replicated on client. Called with target and value. Returns Type Description ISyncMethod self SetVersion(Int32) Declaration ISyncMethod SetVersion(int version) Parameters Type Name Description Int32 version Handler version Returns Type Description ISyncMethod self"
  },
  "api/UnofficialMultiplayerAPI.MPApi.html": {
    "href": "api/UnofficialMultiplayerAPI.MPApi.html",
    "title": "Class MPApi",
    "keywords": "Class MPApi The primary static class that contains methods used to interface with the multiplayer mod. Inheritance Object MPApi Namespace : UnofficialMultiplayerAPI Assembly : 0UnofficialMultiplayerAPI.dll Syntax [StaticConstructorOnStartup] public static class MPApi Fields enabled Declaration public static readonly bool enabled Field Value Type Description Boolean Returns true if API is initialized. Properties IsHosting Declaration public static bool IsHosting { get; } Property Value Type Description Boolean Returns true if currently running on a host. IsInMultiplayer Declaration public static bool IsInMultiplayer { get; } Property Value Type Description Boolean Returns true if currently running in a multiplayer session (both on client and host). PlayerName Declaration public static string PlayerName { get; } Property Value Type Description String Returns local player's name. Methods FieldWatchPostfix() Ends the current synchronization stack and executes it. Declaration public static void FieldWatchPostfix() Remarks Has to be called after invoking Watch methods. See also Watch(Object, Object) . FieldWatchPrefix() Starts a new synchronization stack. Declaration public static void FieldWatchPrefix() Remarks Has to be called before invoking Watch methods. See also Watch(Object, Object) . RegisterSyncMethod(MethodInfo, SyncType[]) Registers a method for syncing and returns its ISyncMethod . Declaration public static ISyncMethod RegisterSyncMethod(MethodInfo method, SyncType[] argTypes = null) Parameters Type Name Description MethodInfo method MethodInfo of a method to register UnofficialMultiplayerAPI.SyncType [] argTypes Method's parameter types Returns Type Description ISyncMethod A new registered ISyncMethod Remarks Has to be called inside of IMultiplayerInit . Init() . It's recommended to use SyncMethodAttribute instead, unless you have to otherwise. Examples Register a method for syncing using reflection and set it to debug only. RegisterSyncMethod(typeof(MyType).GetMethod(nameof(MyType.MyMethod))).SetDebugOnly(); RegisterSyncMethod(Type, String, SyncType[]) Registers a method for syncing and returns its ISyncMethod . Declaration public static ISyncMethod RegisterSyncMethod(Type type, string methodOrPropertyName, SyncType[] argTypes = null) Parameters Type Name Description Type type Type that contains the method String methodOrPropertyName Name of the method UnofficialMultiplayerAPI.SyncType [] argTypes Method's parameter types Returns Type Description ISyncMethod A new registered ISyncMethod Remarks Has to be called inside of IMultiplayerInit . Init() . It's recommended to use SyncMethodAttribute instead, unless you have to otherwise. SyncField(Type, String) Registers a field for syncing and returns it's ISyncField . Declaration public static ISyncField SyncField(Type targetType, string memberPath) Parameters Type Name Description Type targetType Type of the target class that contains the specified member if null, memberPath will point at field from the global namespace String memberPath Path to a member. If the member is to be indexed, it has to end with /[] eg. \"myArray/[]\" Returns Type Description ISyncField A new registered ISyncField Remarks Has to be called inside of IMultiplayerInit . Init() . Watch(ISyncField, Object, Object) An alias for Watch(Object, Object) . Declaration public static void Watch(ISyncField field, object target = null, object index = null) Parameters Type Name Description ISyncField field ISyncField object to watch Object target An object of type set in the ISyncField . Set to null if you're watching a static field. Object index Index in the field path set in ISyncField"
  },
  "api/UnofficialMultiplayerAPI.SyncWorker.html": {
    "href": "api/UnofficialMultiplayerAPI.SyncWorker.html",
    "title": "Class SyncWorker",
    "keywords": "Class SyncWorker An abstract class that can be both a reader and a writer depending on implementation. Inheritance Object SyncWorker Namespace : UnofficialMultiplayerAPI Assembly : 0UnofficialMultiplayerAPI.dll Syntax public abstract class SyncWorker Remarks See ISyncable and SyncerAttribute for usage examples. Constructors SyncWorker(Boolean) Declaration protected SyncWorker(bool isWriting) Parameters Type Name Description Boolean isWriting Fields isWriting true if is currently writing. Declaration public readonly bool isWriting Field Value Type Description Boolean Methods Bind(ref Boolean) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref bool obj) Parameters Type Name Description Boolean obj object to bind Bind(ref Byte) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref byte obj) Parameters Type Name Description Byte obj object to bind Bind(ref Double) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref double obj) Parameters Type Name Description Double obj object to bind Bind(ref Int16) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref short obj) Parameters Type Name Description Int16 obj object to bind Bind(ref Int32) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref int obj) Parameters Type Name Description Int32 obj object to bind Bind(ref Int64) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref long obj) Parameters Type Name Description Int64 obj object to bind Bind(Object, String) Uses reflection to bind a field or property Declaration public abstract void Bind(object obj, string name) Parameters Type Name Description Object obj object where the field or property can be found if null, name will point at field from the global namespace String name path to the field or property Bind(ref SByte) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref sbyte obj) Parameters Type Name Description SByte obj object to bind Bind(ref Single) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref float obj) Parameters Type Name Description Single obj object to bind Bind(ref String) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref string obj) Parameters Type Name Description String obj object to bind Bind(ref UInt16) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref ushort obj) Parameters Type Name Description UInt16 obj object to bind Bind(ref UInt32) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref uint obj) Parameters Type Name Description UInt32 obj object to bind Bind(ref UInt64) Reads or writes an object referenced by obj . Declaration public abstract void Bind(ref ulong obj) Parameters Type Name Description UInt64 obj object to bind Bind(ref ISyncable) Reads or writes an object inheriting ISyncable interface. Declaration public void Bind(ref ISyncable obj) Parameters Type Name Description ISyncable obj object to bind Remarks Does not create a new object. Bind<T>(ref T) Reads or writes an object referenced by obj Declaration public abstract void Bind<T>(ref T obj) Parameters Type Name Description T obj object to bind Type Parameters Name Description T type of the object to bind Remarks Can read/write types using user defined syncers, ISyncable s and readers/writers implemented by the multiplayer mod."
  },
  "api/UnofficialMultiplayerAPI.html": {
    "href": "api/UnofficialMultiplayerAPI.html",
    "title": "Namespace UnofficialMultiplayerAPI",
    "keywords": "Namespace UnofficialMultiplayerAPI Classes MPApi The primary static class that contains methods used to interface with the multiplayer mod. SyncerAttribute An attribute that marks a method as a syncer for a type specified in its second parameter. SyncMethodAttribute An attribute that is used to mark methods for syncing. SyncWorker An abstract class that can be both a reader and a writer depending on implementation. UninitializedAPI An exception that is thrown if you try to use the API without avaiable host. Interfaces IMultiplayerInit An interface that is used as an entry point for multiplayer initialization. ISyncable An interface that allows syncing objects that inherit it. ISyncField SyncField interface. ISyncMethod SyncMethod interface. Enums SyncContext Context flags which are sent along with a command"
  },
  "api/UnofficialMultiplayerAPI.SyncMethodAttribute.html": {
    "href": "api/UnofficialMultiplayerAPI.SyncMethodAttribute.html",
    "title": "Class SyncMethodAttribute",
    "keywords": "Class SyncMethodAttribute An attribute that is used to mark methods for syncing. Inheritance Object Attribute SyncMethodAttribute Namespace : UnofficialMultiplayerAPI Assembly : 0UnofficialMultiplayerAPI.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class SyncMethodAttribute : Attribute, _Attribute Examples An example showing how to mark a method for syncing. [SyncMethod] public void MyMethod(...) { ... } Constructors SyncMethodAttribute(SyncContext) Declaration public SyncMethodAttribute(SyncContext context = SyncContext.None) Parameters Type Name Description SyncContext context Context Fields cancelIfAnyArgNull Instructs SyncMethod to cancel synchronization if any arg is null (see CancelIfAnyArgNull() ). Declaration public bool cancelIfAnyArgNull Field Value Type Description Boolean cancelIfNoSelectedMapObjects Instructs SyncMethod to cancel synchronization if no map objects were selected during the call (see CancelIfNoSelectedMapObjects() ). Declaration public bool cancelIfNoSelectedMapObjects Field Value Type Description Boolean cancelIfNoSelectedWorldObjects Instructs SyncMethod to cancel synchronization if no world objects were selected during call replication(see CancelIfNoSelectedWorldObjects() ). Declaration public bool cancelIfNoSelectedWorldObjects Field Value Type Description Boolean context Declaration public SyncContext context Field Value Type Description SyncContext exposeParameters A list of types to expose (see ExposeParameter(Int32) ) Declaration public int[] exposeParameters Field Value Type Description Int32 [] setDebugOnly Instructs SyncMethod to synchronize only in debug mode (see SetDebugOnly() ). Declaration public bool setDebugOnly Field Value Type Description Boolean"
  },
  "api/UnofficialMultiplayerAPI.SyncerAttribute.html": {
    "href": "api/UnofficialMultiplayerAPI.SyncerAttribute.html",
    "title": "Class SyncerAttribute",
    "keywords": "Class SyncerAttribute An attribute that marks a method as a syncer for a type specified in its second parameter. Inheritance Object Attribute SyncerAttribute Namespace : UnofficialMultiplayerAPI Assembly : 0UnofficialMultiplayerAPI.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class SyncerAttribute : Attribute, _Attribute Remarks Method with this attribute has to be static. Examples An implementation that manually constructs an object. [Syncer(shouldConstruct = false)] public static void MySyncer(SyncWorker sync, ref MyClass inst) { if(!sync.isWriting) inst = new MyClass(\"hello\"); sync.bind(ref inst.myField); } An implementation that instead of creating a new object, references its existing one which resides in MyThingComp that inherits ThingComp class. Subclasses of ThingComp are sent as a reference by the multiplayer mod itself. [Syncer(shouldConstruct = false)] public static void MySyncer(SyncWorker sync, ref MyClass inst) { if(!sync.isWriting) MyThingComp parent = null; sync.Bind(ref parent); // Receive its parent inst = new MyClass(parent); else sync.Bind(ref inst.parent); // Send its parent sync.bind(ref inst.myField); } Fields isImplicit Decides if the type specified in the second parameter should also be used as a syncer for all of its subclasses. Declaration public bool isImplicit Field Value Type Description Boolean shouldConstruct Decides if the method should get an already constructed object in case of reading data. Declaration public bool shouldConstruct Field Value Type Description Boolean"
  },
  "api/UnofficialMultiplayerAPI.SyncContext.html": {
    "href": "api/UnofficialMultiplayerAPI.SyncContext.html",
    "title": "Enum SyncContext",
    "keywords": "Enum SyncContext Context flags which are sent along with a command Namespace : UnofficialMultiplayerAPI Assembly : 0UnofficialMultiplayerAPI.dll Syntax [Flags] public enum SyncContext Fields Name Description CurrentMap Send current map context MapMouseCell Send mouse cell context (emulates mouse position) MapSelected Send map selected context (object selected on the map) None Default value. (no context) QueueOrder_Down Send order queue context (emulates pressing KeyBindingDefOf.QueueOrder) WorldSelected Send world selected context (object selected on the world map)"
  },
  "api/UnofficialMultiplayerAPI.IMultiplayerInit.html": {
    "href": "api/UnofficialMultiplayerAPI.IMultiplayerInit.html",
    "title": "Interface IMultiplayerInit",
    "keywords": "Interface IMultiplayerInit An interface that is used as an entry point for multiplayer initialization. Namespace : UnofficialMultiplayerAPI Assembly : 0UnofficialMultiplayerAPI.dll Syntax public interface IMultiplayerInit Methods Init() An entry point for initialization. Declaration void Init()"
  }
}